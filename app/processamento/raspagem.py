import pandas as pd
import ast
import re

# Função para avaliar o JSON em segurança
def safe_literal_eval(text):
    try:
        return ast.literal_eval(text)
    except:
        return None

# Função de pré-processamento para limpar strings problemáticas (caso necessário)
def preprocess_string(s):
    return s.replace("\n", "").replace("\r", "").replace('\\n', '').replace('\\', '').strip()

# Função de extração de dados adaptada para o novo formato de JSON
def extract_data(resposta):
    if isinstance(resposta, str):  
        try:
            resposta_clean = re.sub(r'```json|```', '', resposta).strip()
            resposta_clean = preprocess_string(resposta_clean)
            resposta_clean = resposta_clean.replace(
                'Generated by BLACKBOX.AI, try unlimited chat https://www.blackbox.ai', '').strip()

            data = safe_literal_eval(resposta_clean)

            extracted_info = []

            # Processa cada entrada do JSON
            def process_entry(entry):
                if isinstance(entry, dict):
                    acao = entry.get("ação", "")
                    nome = entry.get("Nome", "")
                    cargo = entry.get("Cargo", "")
                    extracted_info.append((acao, nome, cargo))

            if isinstance(data, list):
                for item in data:
                    process_entry(item)
            elif isinstance(data, dict):
                process_entry(data)

            return extracted_info
        except Exception as e:
            print(f"Erro ao processar resposta: {e}")
            print(f"Resposta problemática: {resposta}")
            return []
    else:
        return [] 

# Função principal que recebe um DataFrame e atualiza o status do processo
def raspagem_dataframe(df):
    try:
        df['Resposta_Gerada'] = df['Resposta_Gerada'].fillna('')

        df['extracted_data'] = df['Resposta_Gerada'].apply(extract_data)

        expanded_df = df.explode('extracted_data').reset_index(drop=True)

        extracted_list = expanded_df['extracted_data'].tolist()

        valid_data = [item if isinstance(item, (list, tuple)) and len(item) == 3 else [None, None, None] for item in extracted_list]

        extracted_df = pd.DataFrame(valid_data, columns=['TIPO', 'NOME', 'CARGO'])

        expanded_df = pd.concat([expanded_df, extracted_df], axis=1)

        if 'extracted_data' in expanded_df.columns:
            expanded_df = expanded_df.drop(columns=['extracted_data'])

        # Filtrar registros com valores não nulos para 'Ação' e 'Nome'
        expanded_final_df = expanded_df.dropna(subset=['TIPO', 'NOME'])

        return expanded_final_df

    except Exception as e:
        print(f"Erro durante o processamento: {str(e)}")
        return None
